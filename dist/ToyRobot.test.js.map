{"version":3,"sources":["../src/ToyRobot.test.js"],"names":["test","robot","ToyRobot","expect","tabletop","width","toBe","height","x","y","facing","setFacing","toThrow","Error"],"mappings":"gGAAA,4DAEAA,IAAI,CAAC,sBAAD,CAAyB,IAAM,CAC/B,GAAIC,CAAAA,KAAK,CAAG,GAAIC,kBAAJ,EAAZ,CACAC,MAAM,CAACF,KAAK,CAACG,QAAN,CAAeC,KAAhB,CAAN,CAA6BC,IAA7B,CAAkC,CAAlC,EACAH,MAAM,CAACF,KAAK,CAACG,QAAN,CAAeG,MAAhB,CAAN,CAA8BD,IAA9B,CAAmC,CAAnC,EACAH,MAAM,CAACF,KAAK,CAACO,CAAP,CAAN,CAAgBF,IAAhB,CAAqB,IAArB,EACAH,MAAM,CAACF,KAAK,CAACQ,CAAP,CAAN,CAAgBH,IAAhB,CAAqB,IAArB,EACAH,MAAM,CAACF,KAAK,CAACS,MAAP,CAAN,CAAqBJ,IAArB,CAA0B,IAA1B,EACH,CAPG,CAAJ,CASAN,IAAI,CAAC,qCAAD,CAAwC,IAAM,CAC9C,GAAIC,CAAAA,KAAK,CAAG,GAAIC,kBAAJ,EAAZ,CACAC,MAAM,CAACF,KAAK,CAACU,SAAN,CAAgB,SAAhB,CAAD,CAAN,CAAmCC,OAAnC,CAA2C,GAAIC,CAAAA,KAAJ,CAAU,yCAAV,CAA3C,EACH,CAHG,CAAJ,CAKAb,IAAI,CAAC,qCAAD,CAAwC,IAAM,CAC9C,GAAIC,CAAAA,KAAK,CAAG,GAAIC,kBAAJ,EAAZ,CACAC,MAAM,CAACF,KAAK,CAACU,SAAN,CAAgB,CAAhB,CAAD,CAAN,CAA2BC,OAA3B,CAAmC,GAAIC,CAAAA,KAAJ,CAAU,gCAAV,CAAnC,EACH,CAHG,CAAJ,CAKAb,IAAI,CAAC,+BAAD,CAAkC,IAAM,CACxC,GAAIC,CAAAA,KAAK,CAAG,GAAIC,kBAAJ,EAAZ,CACAD,KAAK,CAACU,SAAN,CAAgB,OAAhB,EACAR,MAAM,CAACF,KAAK,CAACS,MAAP,CAAN,CAAqBJ,IAArB,CAA0B,OAA1B,EACH,CAJG,CAAJ,CAMA;AACA;AACA;AACA","sourcesContent":["import ToyRobot from \"./ToyRobot\";\n\ntest('Instantiate ToyRobot', () => {\n    let robot = new ToyRobot();\n    expect(robot.tabletop.width).toBe(5);\n    expect(robot.tabletop.height).toBe(5);\n    expect(robot.x).toBe(null);\n    expect(robot.y).toBe(null);\n    expect(robot.facing).toBe(null);\n});\n\ntest('Setting invalid facing of robot - 1', () => {\n    let robot = new ToyRobot();\n    expect(robot.setFacing(\"INVALID\")).toThrow(new Error(\"Invalid facing parameter value: INVALID\"));\n});\n\ntest('Setting invalid facing of robot - 2', () => {\n    let robot = new ToyRobot();\n    expect(robot.setFacing(1)).toThrow(new Error(\"Invalid facing parameter type!\"));\n});\n\ntest('Setting valid facing of robot', () => {\n    let robot = new ToyRobot();\n    robot.setFacing('NORTH');\n    expect(robot.facing).toBe('NORTH');\n});\n\n// test('Check if the table move is within the table width and height', () => {\n//     let robot = new ToyRobot();\n//     expect(tableTop.checkOutOfBound(1, 1)).toBe(false);\n// });\n"],"file":"ToyRobot.test.js"}